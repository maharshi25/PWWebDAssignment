#Objective: Analyze a dataset containing information about car listings and perform various data analytics tasks.

#Dataset: We'll use a sample dataset car_data.csv containing information about cars, including features like make, model, year, price, mileage, etc.

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Step 1: Load the dataset
file_path = 'car_data.csv'
df = pd.read_csv(file_path)

# Step 2: Data Cleaning and Preparation (if needed)
# Check for missing values
print(df.isnull().sum())

# Step 3: Exploratory Data Analysis (EDA)
# Summary statistics
print(df.describe())

# Distribution of numerical variables
sns.histplot(df['price'], bins=20, kde=True)
plt.title('Distribution of Car Prices')
plt.xlabel('Price')
plt.ylabel('Count')
plt.show()

sns.histplot(df['mileage'], bins=20, kde=True)
plt.title('Distribution of Mileage')
plt.xlabel('Mileage')
plt.ylabel('Count')
plt.show()

# Count of categorical variables
sns.countplot(x='make', data=df)
plt.title('Count of Cars by Make')
plt.xlabel('Make')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.show()

# Step 4: Data Visualization
# Scatter plot of price vs mileage
plt.figure(figsize=(8, 6))
sns.scatterplot(x='mileage', y='price', data=df)
plt.title('Scatter plot of Price vs Mileage')
plt.xlabel('Mileage')
plt.ylabel('Price')
plt.show()

# Step 5: Insights and Conclusions
# Example conclusion:
# From the scatter plot, we observe that there is a negative correlation between mileage and price, indicating that cars with lower mileage tend to have higher prices.

# Step 6: Optional - Build a predictive model (example with linear regression)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Example: Predicting price based on mileage
X = df[['mileage']]  # Feature
y = df['price']      # Target

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

# Visualize the predicted vs actual prices
plt.figure(figsize=(8, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted')
plt.title('Linear Regression: Predicted vs Actual Prices')
plt.xlabel('Mileage')
plt.ylabel('Price')
plt.legend()
plt.show()

#NOTE: I have no previous knowledge of Data Analytics, thus I have taken help of ChatGpt, Google etc. for DataSet and operation that should I perform
